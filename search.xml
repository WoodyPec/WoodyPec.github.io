<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>8月5日随笔</title>
    <url>/2022/08/05/8%E6%9C%885%E6%97%A5%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p><em>Hello!</em></p>
<p>今天起的好早啊，因为参加了B站up主”英雄哪里出来“的算法直播课，定了4点50的闹钟，结果4点46就醒了，看来<strong>我还没老</strong>，哈哈</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>8月6日随笔</title>
    <url>/2022/08/06/8%E6%9C%886%E6%97%A5%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<p><strong>今天早起失败了！</strong></p>
<p>8点半才起，究其原因，我归结为两点，一是英雄说不需要打卡了，起床的动力减小了。二是5点起床实在是太早了，其实也可以说不早，但是客观事实是我长期失眠，入睡很困难，突然调整生物钟依然睡不着，昨天我11点多一点躺下，估计12点多才睡着，因为这时候我室友都上床了。而且宿舍的睡眠环境糟糕这是不争的事实，我想早睡只是一厢情愿。耳塞也不能常用，经常戴耳机和耳塞，耳朵也有点发炎了，但是图书馆不戴耳机又不行，难搞。</p>
<p>所以我要做一下调整。</p>
<p>目前我已经做到的是晚上锻炼，11点之前上床，那么如果按照这个规律来算的话，每天5点起床，长期下来我一定睡眠不足，虽然英雄说的是早期可以获得宝贵的时间，但是我不想这个时间是通过剥夺睡眠来获得的，sleep deprivation不可取，长期下来对身体肯定不好。因此我延后了起床时间，保证我的睡眠时间，让身体能够有时间修复，养成好习惯才能长期可持续的工作学习。</p>
<p>就这样，先吃饭了。</p>
<p>$y = ax^2 + bx + c$</p>
<p>$\sqrt{2}$</p>
<p>$\color{Blue} \frac{1}{2}$</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>c++学习Day1</title>
    <url>/2022/08/05/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Hexo命令</title>
    <url>/2022/08/05/%E5%B8%B8%E7%94%A8Hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>只列出了一些常用命令，如需其他可查看手册<a href="https://hexo.io/zh-cn/docs/commands.html">指令 | Hexo</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">完整命令</th>
<th style="text-align:center">简写命令</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">hexo clean</td>
<td style="text-align:center"></td>
<td style="text-align:center">清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</td>
</tr>
<tr>
<td style="text-align:center">hexo generate</td>
<td style="text-align:center">hexo g</td>
<td style="text-align:center">生成静态文件</td>
</tr>
<tr>
<td style="text-align:center">hexo deploy</td>
<td style="text-align:center">hexo d</td>
<td style="text-align:center">部署网站</td>
</tr>
<tr>
<td style="text-align:center">hexo server</td>
<td style="text-align:center">hexo s</td>
<td style="text-align:center">启动服务器<br />网址http://localhost:4000/</td>
</tr>
<tr>
<td style="text-align:center">hexo new “xxx”</td>
<td style="text-align:center">hexo n xxx</td>
<td style="text-align:center">新建一篇名为xxx的文章</td>
</tr>
<tr>
<td style="text-align:center">hexo clean &amp;&amp; hexo g -d</td>
<td style="text-align:center"></td>
<td style="text-align:center">一键部署</td>
</tr>
<tr>
<td style="text-align:center">hexo version</td>
<td style="text-align:center"></td>
<td style="text-align:center">显示 Hexo 版本</td>
</tr>
<tr>
<td style="text-align:center">hexo list</td>
<td style="text-align:center"></td>
<td style="text-align:center">列出网站资料</td>
</tr>
<tr>
<td style="text-align:center">hexo --safe</td>
<td style="text-align:center"></td>
<td style="text-align:center">在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行</td>
</tr>
<tr>
<td style="text-align:center">hexo --debug</td>
<td style="text-align:center"></td>
<td style="text-align:center">在终端中显示调试信息并记录到 <code>debug.log</code></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>折腾了半天换背景。。。</title>
    <url>/2022/08/05/%E6%8A%98%E8%85%BE%E4%BA%86%E5%8D%8A%E5%A4%A9%E6%8D%A2%E8%83%8C%E6%99%AF%E3%80%82%E3%80%82%E3%80%82/</url>
    <content><![CDATA[<p>RT</p>
<p>折腾了半天，看了好多教程，又是添加css，又是改js的，啥都没用。。</p>
<p>又陷入怪圈了</p>
<p>ps:今天买了个麦轮小车，本来打算自己买材料焊，电路板在嘉立创已经打好了，就是bom麻烦点，焊接应该也不难，不过没有烙铁有点难受。后来一看qq群的群主所有材料才卖158，一想自己买也得110+还不算3D打印的轮子，明显现成的材料划算。结果晚上群主跟我说让我+50块钱，因为麦轮他已经用大头针都做好了，算成品了，而且他那也没半成品。我一想，这个价钱那还不如直接买他升级版的焊接好的，才差40块钱，我也不是非得自己焊接（没金刚钻就不揽瓷器活了），40块钱都不够买个烙铁，所以我就买了让他焊接好的升级版麦轮小车，轮子和电机都升级了，看起来就更结实一点，等以后有机会了我再自己买材料焊个玩，大概就这样，先不折腾Hexo了，等小车到了再耍耍。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记Day1</title>
    <url>/2022/08/05/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0Day1/</url>
    <content><![CDATA[<h2 id="嵩天-《python语言设计》"><strong>嵩天 《python语言设计》</strong></h2>
<h1><u>==第一周==</u></h1>
<h2 id="font-color-DarkYellow-8月5日-20-54-font"><font color=DarkYellow><strong>8月5日 20:54</strong></font></h2>
<p>1.编译和解释</p>
<p>编译是一次性执行全部源代码，后续不再需要源代码，时间久远会有源代码丢失的情况</p>
<p>解释是逐条执行源代码，因此一直需要源代码，更便于维护</p>
<p>2.程序的基本编写方法IPO</p>
<p>Input Process Output</p>
<p>输入是程序的开始</p>
<p>输出是程序展示运算结果的方式，如果没有输出程序是没有意义的</p>
<p>处理方法统称<strong>算法</strong>，是程序最重要的部分，也是程序的灵魂</p>
<p>3.编程解决问题的步骤（6步骤）</p>
<p>分析问题：分析问题的计算部分</p>
<p>划分边界：划分问题的功能边界，规划IPO</p>
<p>设计算法：设计问题求解的算法，关注问题本身</p>
<p>编写程序：编程</p>
<p>调试测试：调试程序使其正确运行</p>
<p>升级维护：更新完善</p>
<p><strong>精简步骤（3步）</strong></p>
<p>确定IPO：明确计算部分和功能边界</p>
<p>编写程序：将计算求解的设计变成现实</p>
<p>调试程序：确保程序按照正确逻辑能够正确运行</p>
<p>4.为什么要学习编程？</p>
<p><strong>编程能够训练思维</strong></p>
<p>①体现了一种抽象的交互关系、自动化执行的思维模式</p>
<p>②计算思维：区别数学的逻辑思维和物理的实证思维的第三种思维模式</p>
<p>③促进人类思考，增进观察力和深化对交互关系的理解</p>
<p><strong>编程能够增进认识</strong></p>
<p>①不单纯是求解计算问题</p>
<p>②</p>
<p><strong>编程能够带来乐趣</strong></p>
<p><strong>==编程能够提高效率==</strong></p>
<p><strong>编程可以带来就业机会</strong></p>
<p>5.学习编程的误区</p>
<p>编程很难学吗？掌握方法就很容易！</p>
<p>首先，掌握编程语言的语法，熟悉基本概念和逻辑</p>
<p>其次，结合计算问题思考程序结构，会使用编程套路</p>
<p>最后，参照案例多练习多实践，学会举一反三</p>
<p>6.python的两种编程方式</p>
<p>交互式：通过IDLE（Integrated Development and Learning Environment）对每个输入语句即时运行结果，适合语法练习</p>
<p>文件式：批量执行一组语句并运行结果，是编程的主要方式</p>
<p>6.示例1：温度转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#TempConvert.py</span><br><span class="line">TempStr = input(&quot;请输入带有符号的温度值：&quot;)</span><br><span class="line">if TempStr[-1] in [&#x27;F&#x27;,&#x27;f&#x27;]:</span><br><span class="line">    C = (eval(TempStr[0:-1])-32)/1.8</span><br><span class="line">    print(&quot;转换后的温度是&#123;:.2f&#125;C&quot;.format(C))</span><br><span class="line">elif TempStr[-1] in [&#x27;C&#x27;,&#x27;c&#x27;]:</span><br><span class="line">    F = 1.8*eval(TempStr[0:-1])+32</span><br><span class="line">    print(&quot;转换后的温度是&#123;:.2f&#125;F&quot;.format(F))</span><br><span class="line">else:</span><br><span class="line">    print(&quot;输入格式错误&quot;)</span><br></pre></td></tr></table></figure>
<p>①<strong>缩进</strong></p>
<p>严格明确：缩进是语法的一部分，缩进不正确程序运行错误</p>
<p>所属关系：表达代码间包含和层次关系的<strong>唯一</strong>手段</p>
<p>长度一致：程序内一致即可，一般用4个空格或1个TAB，缩进长度需要一致</p>
<p>②注释</p>
<p>不被执行，提高程序可读性</p>
<p>单行注释：#</p>
<p>多行注释：‘’’    ‘’’</p>
<p>③<strong>命名与保留字</strong></p>
<p>变量：程序中用于保存和表示数据的占位符号，采用标识符来表示</p>
<p>TempStr是变量名字</p>
<p>命名：关联标识符的过程</p>
<p>命名规则：大小写字母、数字、下划线和汉字等字符及组合</p>
<p>**注意事项：**大小写敏感，首字符不能是数字，不能与保留字相同</p>
<p>保留字：被编程语言定义并保留使用的标识符，python共33个保留字</p>
<h2 id="font-color-DarkYellow-8月7日-9-43更新-font"><font color=DarkYellow><strong>8月7日 9:43更新</strong></font></h2>
<p>④<strong>数据类型</strong></p>
<p>程序设计语言不允许存在语法歧义，需要定义数据的形式，如给10,011,101关联一种计算机可以理解的形式</p>
<p>程序设计语言通过一定方式向计算机表达数据的形式，如&quot;123&quot;表示文本字符串123，123则表示数字123</p>
<p>1）字符串：用“”或者‘’都可以</p>
<p>字符串的序号：正向递增序号（从0开始），反向递减序号（最大是-1）</p>
<p>字符串的使用：</p>
<p>​		索引：返回字符串中单个字符，形式是&lt;字符串&gt;[M]</p>
<p>​		e.g. “请输入带有符号的温度值：”[0]或者TempStr[-1]</p>
<p>​		切片：返回字符串中的一段字符子串，形式是&lt;字符串&gt;[M:N]</p>
<p>​		e.g. “请输入带有符号的温度值：”[1:3]或者TempStr[-1]，不包含后面的</p>
<p>2）数字类型：整数对应数学中的整数，浮点数对应实数（带有小数部分）</p>
<p>3）列表：使用[]表示，用逗号,分隔各元素</p>
<p>使用保留字in判断一个元素是否再列表中</p>
<p>e.g. TempStr[-1] in [‘C’,‘c’] 判断前者是否与列表中的某个元素相同，相同则返回True</p>
<p>⑤语句和函数：赋值语句，分支语句</p>
<p>赋值语句：给变量赋予新的数据值，<strong>右侧的数据类型同时作用于变量</strong></p>
<p>分支语句：如if TempStr[-1] in [‘F’,‘f’]: #如果条件为True则执行冒号后语句</p>
<p><em><strong>注意：</strong></em>:的作用是如果中间的条件成立，那么则执行冒号后带有缩进的语句，反之跳过缩进的语句</p>
<p>**函数：**根据输入参数产生不同输出的功能过程，采用<font color=Red>&lt;函数名&gt;(&lt;参数&gt;)</font>方式使用</p>
<p>e.g. eval(TempStr[0:-1]) #TempStr[0:-1]是参数</p>
<p><font color=Blue>eval()函数</font>，也叫评估函数，可以去掉参数最外侧引号并执行余下语句</p>
<p>eval(&lt;字符串或字符串变量&gt;)</p>
<p>e.g. eval(“1”) #输出结果是1  eval(“1+2”) #输出结果是3  eval(‘“1”’) #输出结果是‘1’</p>
<p>eval('print(“Hello”) ') #输出结果是Hello</p>
<p>⑥输入输出</p>
<p>输入函数input()，格式&lt;变量&gt; = input(&lt;提示信息字符串&gt;)</p>
<p>用户输入的信息以字符串类型保存在&lt;变量&gt;中</p>
<p>输出函数print()，格式print(&lt;拟输出字符串或字符串变量&gt;)</p>
<p>此外，print函数的<font color=Red>格式化</font>：</p>
<p>e.g. print(“转换后的温度是{:.2f}C”.format©)</p>
<p>{}表示槽，后续变量填充到槽中，{:.2f}表示将变量C填充到这个位置时取小数点后2位</p>
<p><font color=Red><strong>考试</strong></font></p>
<p>第一周的内容学完之后我就开始自己练习，事实证明我的计算思维还真是差了一点，把python123的练习的弄的差不多了，我就开始考试了，信心满满</p>
<p><img src="https://s1.ax1x.com/2022/08/05/vnDFIK.jpg" alt="先插入一张图片试试"></p>
<p>考试内容是10道选择题和2道编程题，我本以为1小时绰绰有余，结果还是高估了自己</p>
<p>第一道题是**Hello World的条件输出 **</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">要求：</span><br><span class="line"></span><br><span class="line">获得用户输入的一个整数，参考该整数值，打印输出&quot;Hello World&quot;，要求：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬</span><br><span class="line"></span><br><span class="line">如果输入值是0，直接输出&quot;Hello World&quot;‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬</span><br><span class="line"></span><br><span class="line">如果输入值大于0，以两个字符一行方式输出&quot;Hello World&quot;（空格也是字符）‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬</span><br><span class="line"></span><br><span class="line">如果输入值小于0，以垂直方式输出&quot;Hello World&quot;</span><br></pre></td></tr></table></figure>
<p>两个字符一行确实难住我了，求教CSDN才懂，不过也确实学到了点东西，下面是我写的程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">num = input()</span><br><span class="line">str = &quot;Hello World&quot;</span><br><span class="line">length = len(str)</span><br><span class="line">if eval(num) == 0:</span><br><span class="line">    print(str)</span><br><span class="line">elif eval(num) &gt; 0:</span><br><span class="line">    for i in range(0,length,2):</span><br><span class="line">        print(str[i:i+2])</span><br><span class="line">else:</span><br><span class="line">    for i in str:</span><br><span class="line">       print(i)</span><br></pre></td></tr></table></figure>
<p>这里用了一个len函数来求字符串的长度，然后用循环语句2个2个输出，确实挺高效的</p>
<p>而老师给的代码就显得有点简单粗暴了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = eval(input())</span><br><span class="line">if n == 0:</span><br><span class="line">    print(&quot;Hello World&quot;)</span><br><span class="line">elif n &gt; 0:</span><br><span class="line">    print(&quot;He\nll\no \nWo\nrl\nd&quot;)</span><br><span class="line">else:</span><br><span class="line">    for c in &quot;Hello World&quot;:</span><br><span class="line">        print(c)</span><br></pre></td></tr></table></figure>
<p>第二道题是<strong>数值运算</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获得用户输入的一个字符串，格式如下：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬</span><br><span class="line"></span><br><span class="line">M OP N‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬</span><br><span class="line"></span><br><span class="line">其中，M和N是任何数字，OP代表一种操作，表示为如下四种：+, -, *, /（加减乘除）‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬</span><br><span class="line"></span><br><span class="line">根据OP，输出M OP N的运算结果，统一保存小数点后2位。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬</span><br><span class="line"></span><br><span class="line">注意：M和OP、OP和N之间可以存在多个空格，不考虑输入错误情况。</span><br></pre></td></tr></table></figure>
<p>说实话，这可给我难住了，我想了半天，搜索了半天也没啥想法，于是就想求助ZY，可惜考试时间到了他才回复，剩最后2分钟我突发奇想，一顿操作，还是不行，好在加法能工作，先贴上来，以后再看吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str = input()</span><br><span class="line">if &quot;+&quot; in str:</span><br><span class="line">    a = str.index(&quot;+&quot;)</span><br><span class="line">    print(&quot;&#123;:.2f&#125;&quot;.format(eval(str[:a])+eval(str[a:])))</span><br><span class="line">elif &quot;-&quot; in str:</span><br><span class="line">    b = str.index(&quot;-&quot;)</span><br><span class="line">    print(&quot;&#123;:.2f&#125;&quot;.format(eval(str[:b])-eval(str[b:])))</span><br><span class="line">elif &quot;*&quot; in str:</span><br><span class="line">    c = str.index(&quot;*&quot;)</span><br><span class="line">    print(&quot;&#123;:.2f&#125;&quot;.format(eval(str[:c])*eval(str[c:])))</span><br><span class="line">else:</span><br><span class="line">    d = str.index(&quot;/&quot;)</span><br><span class="line">    print(&quot;&#123;:.2f&#125;&quot;.format(eval(str[:d])/eval(str[d:])))</span><br></pre></td></tr></table></figure>
<p>吃饭的时候我都还在想这个问题，回来看了一眼答案</p>
<p><font color=Red><strong>我人傻了</strong></font></p>
<p>答案就2行😅😅😅</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = input()</span><br><span class="line">print(&quot;&#123;:.2f&#125;&quot;.format(eval(s)))</span><br></pre></td></tr></table></figure>
<p>老师还加了一句，“<strong>体会eval()函数的作用，在编程中用处很大。</strong>”</p>
<p>现在确实体会到了，作用确实很大。。。</p>
<p>今天先这样，明天继续</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Hexo+GitHub个人博客的过程</title>
    <url>/2022/08/04/%E6%90%AD%E5%BB%BAHexo+GitHub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="害！">害！</h2>
<p>其实好久之前就想弄一个自己的博客了，一直也没时间（拖延癌晚期），</p>
<!--- more --->
<p>趁着假期打算弄一下，记录一点自己的随笔和学到的知识。2022年8月4号这天早上，我在图书馆开始学习搭建Hexo博客，看了不少文章，主要参考的是这篇 &lt;<a href="https://miaoyanginfo.github.io/2022/04/17/01github%E5%AE%89%E8%A3%85hexo/">在GitHub上部署HEXO | 渊澄 (miaoyanginfo.github.io)</a>&gt;，结果后来发现</p>
<p><strong>真是个大坑！</strong></p>
<p>作者写的很不详细，对于我这种老菜鸟来说无疑是增加了难度！</p>
<p>百度、知乎、CSDN查了一圈，还是知乎更香！终于解决了问题，开心。</p>
<p>下面我就记录一下我自己搭建Hexo的过程吧，我就按照渊澄的教程来吧，就当作debug了。</p>
<p>==以下为原文==</p>
<p>经过三天的不断网上趴文和自我修炼，参考了众多网上大神的教程和文章，自己又填了无数个坑之后，终于成功在GitHub上部署了HEXO系统发布文章，使用GitHub Action功能自动编译HEXO程序并发布静态页面。我将用两个篇幅来记录部署过程。<br>
第一部分介绍如何在本地部署HEXO程序，安装主题，本地预览，然后发布到Github Page。<br>
第二部分介绍如何使用GitHub Action功能实现HEXO程序的自动编译和发布。</p>
<h2 id="GitHub上新建仓库">GitHub上新建仓库</h2>
<p>登录你的Github，新建两个仓库：（<em>我也不懂为啥要建两个仓库</em>*，<em><em>反正我没用上</em>）<br>
一个仓库用于发布我们的HEXO站点，为了便于区分，我们在这里叫它公开仓库，新建的时候选在类型为Public，网址那里填入</em>*.github.io**，（<em>他指的是仓库名Repository name，eg:[<a href="http://WoodyPec.github.io">WoodyPec.github.io</a>]</em>），确保你可以使用域名https://.github.com 访问到你的页面，这篇文章我们主要在这个仓库中进行操作；<br>
另一个站点用于存放我们的HEXO程序源文件，用于和主仓库实现自动化编译和发布的联动，我们叫它私人仓库，类型选择Pravite，名称随便起，我们这里叫做hexo-action。（<em>后来才搞明白，仓库里的master就是存放网页代码的地方</em>）</p>
<h2 id="本地安装配置环境">本地安装配置环境</h2>
<p>需要安装的工具有git和node两个环境，安装包已经上传到了阿里云，大家可以自行下载。<br>
git x64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">https://www.aliyundrive.com/s/eWkiy8beBEj</span><br></pre></td></tr></table></figure>
<p>node x64</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">https://www.aliyundrive.com/s/A6iLQPNecXt</span><br></pre></td></tr></table></figure>
<p>安装完成之后在cmd窗口运行git –version及node -v 命令确保安装正确。</p>
<p>（<em>这步没毛病</em>）</p>
<h2 id="部署Github通讯密钥">部署Github通讯密钥</h2>
<blockquote>
<p>我们在本地运行git bash命令窗，</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">eg:</span><br><span class="line">git config --global user.name &quot;WoodyPec&quot;</span><br><span class="line">git config --global user.email &quot;oxniuxo@outlook.com&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>生成ssh密钥文件:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">eg:ssh-keygen -t rsa -C ”oxniuxo@outlook.com“</span><br></pre></td></tr></table></figure>
<p>连续回车，直到命令运行结束。<br>
在本地用户名文件夹下会看到一个.ssh命名的文件夹（<em>隐藏文件夹</em>），用记事本或是notepad++打开里面的id_rsa.pub文件并复制全部内容。<br>
打开GitHub_Settings_keys 页面，（在仓库首页点settings–&gt;左侧security–&gt;deploy keys）新建new SSH Key，Title随便填，Key那里把刚才复制的公钥粘贴过去，然后点击Add SSH Key。</p>
<blockquote>
<p>我们可以输入下面命令来测试一下密钥是否配置正确：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>
<h2 id="运行安装命令进行HEXO的安装">运行安装命令进行HEXO的安装</h2>
<p>在本地选择一个文件夹，作为你的hexo主目录，在这个文件夹下右键，选择git bash here打开git命令窗口。</p>
<blockquote>
<p>运行命令安装hexo：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行命令在此文件夹新建站点：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>如果命令没有报错的话，在你选定的文件夹下应该会下载到hexo的文件。</p>
<blockquote>
<p>我们可以编辑根目录下的_config.yml来配置HEXO站点的相关信息。<br>
编辑完相关信息之后运行以下命令重新生成站点文件：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<h2 id="打开本地演示模式">打开本地演示模式</h2>
<blockquote>
<p>输入下面命令打开本地演示模式：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>打开之后在浏览器输入<a href="http://localhost:4000/">http://localhost:4000</a>（<em>是4000不是400，又给我挖坑</em>）就可以访问到网站了。</p>
<h2 id="安装主题butterfly">安装主题butterfly</h2>
<p>我们接下来安装一个主题，这里以butterfly这个主题为例，其他主题的安装也类似。</p>
<blockquote>
<p>在hexo文件下下运行以下命令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<p>运行完成之后我们编辑主题文件夹下的_config.yml文件来对主题进行配置。<br>
编辑完成之后复制一份这个yml文件到hexo根目录，并命名为_config.butterfly.yml。<br>
接着编辑根目录下面的站点配置文件_config.yml来更改主题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改完成之后重新运行下面命令编译HEXO：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后本地预览新安装的主题：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h2 id="将站点发布到Github上">将站点发布到Github上</h2>
<p>如果在本地演示没有报错，我们就可以将站点发布到Github上面了。（<em>并不可以</em>）<br>
首先我们需要编辑根目录下的_config.yml文件，拉到文件最底部填入你的github地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:miaoyanginfo/miaoyanginfo.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>（<em>看到了吗，上面写的branch分支是master，这里又有坑</em>）</p>
<blockquote>
<p>然后运行下面的命令：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASH</span><br><span class="line">复制成功npm install hexo-deployer-git  --save</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>发布完成之后我们直接用域名https://***.github.io<br>
就可以访问到我们搭建的HEXO站点了。</p>
<p>教程结束了，但是我并没有成功。</p>
<h2 id="下面说说我遇到的坑">下面说说我遇到的坑</h2>
<p>①You’ve successfully authenticated, but <a href="https://so.csdn.net/so/search?q=GitHub&amp;spm=1001.2101.3001.7020">GitHub</a> does not provide shell access.</p>
<p>后来证实，这个是正常现象。。。但是看到but我就慌啊，而且我后面还有个错误，于是我就重新生成了一边ssh key，没有卵用。看了CSDN的评论说要查看一下远程仓库的地址，要把https的网址改成SSH的，这两个网址都可在GitHub的仓库里复制。于是我试着执行了一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@github.com:名字/仓库名.git</span><br><span class="line">eg:git remote set-url origin git@github.com:WoodyPec/WoodyPec.github.io.git</span><br></pre></td></tr></table></figure>
<p>欸嘿，出现了新问题</p>
<p>②报错 fatal: No such remote ‘origin‘ 的解决方法（转自CSDN）</p>
<p>在本地运行 git remote -v，没有显示任何地址，需要添加，而不是修改。</p>
<p>运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin # 远程url</span><br><span class="line">eg:git remote add origin WoodyPec.github.io</span><br></pre></td></tr></table></figure>
<p>查看 remote，可以看到 fetch 和 push 的链接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">返回结果：</span><br><span class="line">origin	刚才添加的远程url (fetch)</span><br><span class="line">origin	刚才添加的远程url (push)</span><br></pre></td></tr></table></figure>
<p>③ 如果出现了fatal: Not a git repository (or any of the parent directories): .git （转自CSDN）</p>
<p>提示说没有.git这样一个目录</p>
<p>在命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init </span><br></pre></td></tr></table></figure>
<p>就好了。</p>
<p>④把项目原来使用Https改成SSH方式（转自CSDN）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 你项目的根目录</span><br><span class="line">ls -la #查看当前目录下所有的文件，包括因此文件</span><br><span class="line">cd .git #进入git项目的配置目录下</span><br><span class="line">// 找到config文件，并且编辑config文件</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure>
<p>替换url为SSH方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eg:url = git@github.com:beyondverage0908/MyMD.git</span><br></pre></td></tr></table></figure>
<p>保存即可。</p>
<p>⑤Hexo部署出现错误err: Error: Spawn failed解决方式</p>
<p>解决办法，替换url为SSH方式</p>
<p>期间下载Typora还遇到点小问题，现在Typora开始收费了，于是我下载了最后一个免费版本，百度网盘挂着去吃饭了。</p>
<p>下午回来，发现Typora安装不了，提示&quot;This beta version of Typora is expired, please download and install a newer version&quot;，于是又搜索了一番，解决办法：修改注册表（位置：计算机\HKEY_CURRENT_USER\Software\Typora），在Typora右键打开Typora的修改权限，将完全控制以及读取进行拒绝。由于我是右键用管理员身份运行，因此还要将Administrators里面的权限也改了，继续折腾！</p>
<p>下面是遇到的最后一个问题了，部署了Hexo之后，本地网页正常打开，但是输入个人博客的网址却没反应，还是原来的样子。我搜索了很多也没结果，最后还得是知乎。在仓库里直接新建一个html也不显示，修改readme.md有变化，还有人说新建一个index.html就行了（没试），因为我已经破案了！</p>
<p>（转自知乎）==github page 会寻找index.html，<a href="http://xn--readme-o88il42exqflkr81hnpbk36aet5b.md">如果没有就会展示readme.md</a></p>
<p>并且github page 可以设置目录，只要设置的根目录下有index.html就可以正常显示==</p>
<p>也就是说，一直显示readme.md是因为目录设置错了！！！</p>
<p>还记得前面我说有个坑吗？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:miaoyanginfo/miaoyanginfo.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>这里的分支是master，而GitHub默认根目录是main！</p>
<p>修改，重新部署，好了！</p>
<p>折腾了一天，时候不早了，该吃饭了。。。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>收藏一下如何使用emoji</title>
    <url>/2022/08/07/%E6%94%B6%E8%97%8F%E4%B8%80%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8emoji/</url>
    <content><![CDATA[<p><a href="https://dognew0126.github.io/2022/05/22/Hexo%E4%B8%AD%E4%BD%BF%E7%94%A8emoji%E8%A1%A8%E6%83%85/">Hexo中使用emoji表情 - dogNew’s Blog (dognew0126.github.io)</a></p>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>转载Typora教程</title>
    <url>/2022/08/05/%E8%BD%AC%E8%BD%BD-Typora%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><a href="https://github.com/Sakiyary/Markdown-Typora-VSCode-Doc">Sakiyary/Markdown-Typora-VSCode-Doc (github.com)</a></p>
<p>Ps:hexo new命令创建的标题里不能出现[]，会报错。手动修改后部署也不显示，先这样吧。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>规划一下作业和论文</title>
    <url>/2022/08/08/%E8%A7%84%E5%88%92%E4%B8%80%E4%B8%8B%E4%BD%9C%E4%B8%9A%E5%92%8C%E8%AE%BA%E6%96%87/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
